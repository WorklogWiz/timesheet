.rewrite-git-url: &rewrite-git-url
  |
  git config --global credential.helper store
  echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}" > ~/.git-credentials
  git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}".insteadOf ssh://git@${CI_SERVER_HOST}

.rust-linux-builder:
  stage: build
  image: $CI_REGISTRY/autostore/ci/rust:240906-linux
  tags:
    - linux-docker
  before_script:
    - apk add --no-cache git jq
    - *rewrite-git-url
    - semantic-release-cargo prepare $SEMANTIC_RELEASE_VERSION

.rust-windows-builder:
  stage: build
  image: $CI_REGISTRY/autostore/ci/rust-msvc:240909
  tags:
    - docker-windows-2022
  before_script:
    - *rewrite-git-url
    - cargo install semantic-release-cargo
    - semantic-release-cargo prepare $SEMANTIC_RELEASE_VERSION

.test-and-coverage:
  extends: .rust-linux-builder
  stage: test
  script:
    - export CARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage'
    - export LLVM_PROFILE_FILE='.cargo-test-%p-%m.profraw'
    - cargo test --release --no-fail-fast
    - |
      cargo clippy --release --message-format=json -- -D clippy::pedantic 1> clippy-report.json || clippy_exit=$?
      if [ $clippy_exit -ne 0 ]; then
        jq -r 'select(.reason == "compiler-message") | .message | select(.level == "error" or .level == "warning") | .rendered' clippy-report.json
      fi
    - grcov .
        --binary-path ./target/release/deps/
        -s .
        -t cobertura
        --branch
        --ignore-not-existing
        --ignore '../*'
        --ignore "/*"
        -o cobertura.xml
    - |
      apk add --no-cache xmlstarlet
      xmlstarlet sel -t -v "sum(//coverage/@line-rate) div count(//coverage/@line-rate) * 100" \
        cobertura.xml \
        | xargs printf "Total coverage: %.1f%%\n"
  coverage: '/Total coverage: \d+(?:\.\d+)?/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    paths:
      - clippy-report.json
      - cobertura.xml

.sonar-scanner:
  image: sonarsource/sonar-scanner-cli
  stage: test
  tags:
    - linux-docker
  script:
    - sonar-scanner
      -Dsonar.rust.clippy.reportPaths=clippy-report.json
      -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
      -Dsonar.token=$SONARQUBE_TOKEN
      -Dsonar.projectVersion=$SEMANTIC_RELEASE_VERSION
      -Dcommunity.rust.cobertura.reportPaths=cobertura.xml
